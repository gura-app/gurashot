#!/usr/bin/env gura
//=============================================================================
// gurashot
// Copyright (C) 2014 ypsitau
//=============================================================================
import(wx)
import(re)
import(yaml)
import(bmp)
import(gif)
import(jpeg)
import(png)
import(xpm)
import(msico)
import(cairo)
import(resource)
import(mswin)
import(units)
import(translate)

Version = '1.0.3'

//-----------------------------------------------------------------------------
// Control ID
//-----------------------------------------------------------------------------
[
	ID_Open, ID_Close, ID_ShowList, ID_Prev, ID_Next,
	ID_OutputPDF, ID_LaunchPDFViewer,
	ID_RotateL, ID_RotateR, ID_TiltAdj,
	ID_FrostFrame, ID_CenterGuide, ID_CopyExtractedImage, ID_SaveExtractedImage,
	ID_Label, ID_Remove, ID_RenameLabel,
	ID_OrientVert, ID_OrientHorz, ID_OrientAuto,
] = wx.ID_HIGHEST..

//-----------------------------------------------------------------------------
// Layout
//-----------------------------------------------------------------------------
Layout = struct(purpose:string, htImg:number, wdImg:number, htTop:number, htFace:number) {
	CalcSizeEx() = {
		[this.wdImg + g.wdMgn * 2,  this.htImg + g.htMgn * 2]
	}
	CalcImageGrid(wdCanvas:number, htCanvas:number) = {
		[wdImgEx, htImgEx] = this.CalcSizeEx()
		nx = int((wdCanvas - g.wdGuide) / (wdImgEx + g.wdGuide))
		ny = int((htCanvas - g.htGuide - g.htMessage) / (htImgEx + g.htGuide))
		[nx, ny]
	}
}

//-----------------------------------------------------------------------------
// PaperSize
//-----------------------------------------------------------------------------
PaperSize = struct(name:string, width:number, height:number) {
	GetCanvasWidth(orientation:symbol) = {
		cond(orientation == `horizontal, this.width - 10, this.height - 10)
	}
	GetCanvasHeight(orientation:symbol) = {
		cond(orientation == `horizontal, this.height - 10, this.width - 10)
	}
	GetBetterOrientation(layout:Layout, orientation:symbol) = {
		(orientation != `auto) && return(orientation)
		[nx, ny] = layout.CalcImageGrid(this.GetCanvasWidth(`horizontal),
									this.GetCanvasHeight(`horizontal))
		n1 = nx * ny
		[nx, ny] = layout.CalcImageGrid(this.GetCanvasWidth(`vertical),
									this.GetCanvasHeight(`vertical))
		n2 = nx * ny
		cond(n1 >= n2, `horizontal, `vertical)
	}
}

//-----------------------------------------------------------------------------
// FrameCoord
//-----------------------------------------------------------------------------
FrameCoord = struct(xMarkTop:number, xMarkBtm:number, yMarkTop:number, yMarkBtm:number,
	xTop:number, xBtm:number, yTop:number, yBtm:number, width:number, height:number)

//-----------------------------------------------------------------------------
// ImageInfo
//-----------------------------------------------------------------------------
ImageInfo = class {
	public {
		label,			label_init
		fileName,		fileName_init
		rotate,			rotate_init
		xrateTop,		xrateTop_init
		xrateBtm,		xrateBtm_init
		yrateTop,		yrateTop_init
		yrateBtm,		yrateBtm_init
		tiltAdjFlag,	tiltAdjFlag_init
		imgPhotoRaw,
	}
	label_init			= ''
	fileName_init		= ''
	rotate_init			= 0
	xrateTop_init		= .5
	xrateBtm_init		= .5
	yrateTop_init		= .1
	yrateBtm_init		= .6
	tiltAdjFlag_init	= false
	__init__() = {
		this.label			= label_init
		this.fileName		= fileName_init
		this.rotate			= rotate_init
		this.xrateTop		= xrateTop_init
		this.xrateBtm		= xrateBtm_init
		this.yrateTop		= yrateTop_init
		this.yrateBtm		= yrateBtm_init
		this.tiltAdjFlag	= tiltAdjFlag_init
		this.imgPhotoRaw	= nil
	}
	CalcFrameCoord(rcImg:wx.Rect, layout:Layout) = {
		htBtm = layout.htImg - layout.htTop - layout.htFace
		xrateDiff = this.xrateBtm - this.xrateTop
		yrateDiff = this.yrateBtm - this.yrateTop
		xMarkTop = rcImg.x + rcImg.width * this.xrateTop
		xMarkBtm = rcImg.x + rcImg.width * this.xrateBtm
		yMarkTop = rcImg.y + rcImg.height * this.yrateTop
		yMarkBtm = rcImg.y + rcImg.height * this.yrateBtm
		xTop = rcImg.x + rcImg.width * (this.xrateTop - xrateDiff * layout.htTop / layout.htFace)
		xBtm = rcImg.x + rcImg.width * (this.xrateBtm + xrateDiff * htBtm / layout.htFace)
		yTop = rcImg.y + rcImg.height * (this.yrateTop - yrateDiff * layout.htTop / layout.htFace)
		yBtm = rcImg.y + rcImg.height * (this.yrateBtm + yrateDiff * htBtm / layout.htFace)
		height = math.sqrt((xBtm - xTop) ** 2 + (yBtm - yTop) ** 2)
		width = height * layout.wdImg / layout.htImg
		FrameCoord(xMarkTop, xMarkBtm, yMarkTop, yMarkBtm,
										xTop, xBtm, yTop, yBtm, width, height)
	}
}

//-----------------------------------------------------------------------------
// Global variables
//-----------------------------------------------------------------------------
g = module {
	fileNameTmpPDF:public	= path.join(sys.workdir, 'gurashot.pdf')
	fileNameCfg:public		= path.join(sys.cfgdir, 'gurashot.yml')
	//fileNameCfg:public	= 'gurashot.yml'
	fileNameIcon:public		= 'gurashot.ico'
	imgBlank:public = image(`rgba, 800, 800, color(240, 240, 255))
	imgBlank.cairo {|cr|
		cr.set_source_rgb(.8, 0.8, 0.8)
		cr.save {
			cr.scale(1, 1.1)
			cr.arc(400, 250, 180, 0, math.pi * 2)
			cr.fill()
		}
		cr.save {
			cr.scale(1, 5)
			cr.arc(400, 1090, 1000, 0, math.pi * 2)
			cr.fill()
		}
		cr.set_source_rgb(.5, 0.5, 0.5)
		cr.select_font_face('Sans', cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
		cr.set_font_size(100.0)
		cr.move_to(210, 400)
		cr.show_text('no image')
	}
	I(src:binary) = image(base64.reader(src))
	imgOpen:public			= I(resource.folder_image_png)
	imgClose:public			= I(resource.delete_png)
	imgShowList:public		= I(resource.report_picture_png)
	imgNext:public			= I(resource.resultset_next_png)
	imgPrev:public			= I(resource.resultset_previous_png)
	imgRotateL:public		= I(resource.arrow_rotate_anticlockwise_png)
	imgRotateR:public		= I(resource.arrow_rotate_clockwise_png)
	imgTiltAdj:public		= I(resource.tilt_adj_png)
	imgCenterGuide:public	= I(resource.center_guide_png)
	imgFrostFrame:public	= I(resource.user_frosted_png)
	imgTick:public			= I(resource.tick_png)
	imgRenameLabel:public	= I(resource.tag_blue_edit_png)
	imgOrientVert:public	= I(resource.page_white_png)
	imgOrientHorz:public	= I(resource.page_white_horizontal_png)
	imgOrientAuto:public	= I(resource.page_white_database_png)
	layoutTbl:public = @(Layout) {
		{ 'Driver\'s license etc.'$,				30, 24, 2, 23 }
		{ 'Unemployment insurance etc.'$,			30, 25, 2, 23 }
		{ 'Qualifications'$,						30, 30, 2, 23 }
		{ 'Qualifications'$,						35, 24, 2, 26 }
		{ 'Qualifications'$,						36, 24, 2, 27 }
		{ 'Qualifications'$,						36, 25, 2, 27 }
		{ 'Resume etc.'$,							40, 30, 2, 30 }
		{ 'Qualifications'$,						40, 40, 3, 31 }
		{ 'Passport etc.'$,							45, 35, 4, 34 }
		{ 'International driver\'s license etc.'$,	50, 40, 4, 38 }
		{ 'Visa etc.'$,								50, 50, 4, 35 }
		{ 'Qualifications'$,						55, 40, 2, 41 }
		{ 'Qualifications'$,						55, 45, 2, 41 }
		{ 'Qualifications'$,						60, 45, 2, 45 }
	}
	layoutCur:public		= layoutTbl[0]
	paperSizeTbl:public = @(PaperSize) {
		{ 'L'$,				127,  89 }
		{ 'KG'$,			152, 102 }
		{ '2L'$,			178, 127 }
		{ 'A4'$,			297, 210 }
		{ 'A3'$,			420, 297 }
		{ 'Hagaki'$,		148, 100 }
		{ 'Mutsugiri'$,		254, 203 }
		{ 'Yotsugiri'$,		305, 254 }
	}
	cfg:public				= %{}
	imgPhotoRaw:public		= imgBlank
	imgPhotoHighRes:public	= nil
	imgPhotoLowRes:public	= nil
	frame:public			= nil
	xFrame:public			= -1
	yFrame:public			= -1
	wdFrame:public			= 800
	htFrame:public			= 730
	wdSashLeft:public		= 320
	htSashTop:public		= 300
	frostFrameFlag:public	= false
	centerGuideFlag:public	= false
	orientation:public		= `auto	// `auto, `horizontal, `vertical
	paperSizeCur:public		= paperSizeTbl[0]
	imgInfos:public			= []
	imgInfoCur:public		= nil
	wdMgn:public			= 2
	htMgn:public			= 2
	wdGuide:public			= 2
	htGuide:public			= 2
	htMessage:public		= 5
	icon:public				= nil
}

//-----------------------------------------------------------------------------
// LoadConfig / SaveConfig
//-----------------------------------------------------------------------------
LoadConfig() = {
	try {
		g.cfg = yaml.read(g.fileNameCfg)
		g.xFrame:number			= g.cfg['xFrame']
		g.yFrame:number			= g.cfg['yFrame']
		g.wdFrame:number		= g.cfg['wdFrame']
		g.htFrame:number		= g.cfg['htFrame']
		g.wdSashLeft:number		= g.cfg['wdSashLeft']
		g.htSashTop:number		= g.cfg['htSashTop']
		g.frostFrameFlag		= (g.cfg['frostFrameFlag'] == 'true')
		g.centerGuideFlag		= (g.cfg['centerGuideFlag'] == 'true')
		g.orientation			= [`horizontal, `vertical, `auto].\
							find(g.cfg['orientation'].tosymbol()) || `auto
		idxPaperSizeCur:number	= g.cfg['idxPaperSizeCur'].tonumber()
		g.paperSizeCur			= g.paperSizeTbl[idxPaperSizeCur]
		g.imgInfos = g.cfg['imgInfos'].each():list {|dict|
			imgInfo = ImageInfo()
			imgInfo.label			= dict['label']
			imgInfo.fileName		= dict['fileName']
			imgInfo.rotate:number	= dict['rotate']
			imgInfo.xrateTop:number	= dict['xrateTop']
			imgInfo.xrateBtm:number	= dict['xrateBtm']
			imgInfo.yrateTop:number	= dict['yrateTop']
			imgInfo.yrateBtm:number	= dict['yrateBtm']
			imgInfo.tiltAdjFlag		= (dict['tiltAdjFlag'] == 'true')
			imgInfo
		}
	} catch {}
	if (g.imgInfos.isempty()) {
		g.imgInfoCur = ImageInfo()
	} else {
		try {
			idxImgInfoCur = g.cfg['idxImgInfoCur'].tonumber()
			g.imgInfoCur = g.imgInfos[idxImgInfoCur]
		} catch {|e|
			g.imgInfoCur = g.imgInfos.last()
		}
	}
	if (!g.imgInfoCur.fileName.isempty()) {
		try {
			g.imgPhotoRaw = image(g.imgInfoCur.fileName)
		} catch {
			g.imgInfoCur.fileName = ''
		}
	}
}

SaveConfig() = {
	g.cfg['xFrame']				= g.xFrame
	g.cfg['yFrame']				= g.yFrame
	g.cfg['wdFrame']			= g.wdFrame
	g.cfg['htFrame']			= g.htFrame
	g.cfg['wdSashLeft']			= g.wdSashLeft
	g.cfg['htSashTop']			= g.htSashTop
	g.cfg['frostFrameFlag']		= g.frostFrameFlag
	g.cfg['centerGuideFlag']	= g.centerGuideFlag
	g.cfg['orientation']		= g.orientation
	g.cfg['idxPaperSizeCur']	= g.paperSizeTbl.find(g.paperSizeCur):index || 0
	g.cfg['idxImgInfoCur']		= g.imgInfos.find(g.imgInfoCur):index || -1
	g.cfg['imgInfos'] = g.imgInfos.each():list {|imgInfo|
		%{
			'label'			=> imgInfo.label
			'fileName'		=> imgInfo.fileName
			'rotate'		=> imgInfo.rotate
			'xrateTop'		=> imgInfo.xrateTop
			'xrateBtm'		=> imgInfo.xrateBtm
			'yrateTop'		=> imgInfo.yrateTop
			'yrateBtm'		=> imgInfo.yrateBtm
			'tiltAdjFlag'	=> imgInfo.tiltAdjFlag
		}
	}
	yaml.write(g.fileNameCfg, g.cfg)
}

InitializeResource() = {
	g.icon = wx.Icon(g.fileNameIcon, wx.BITMAP_TYPE_ICO)
}

//-----------------------------------------------------------------------------
// UpdateImagePhoto
//-----------------------------------------------------------------------------
UpdateImagePhoto() = {
	g.imgPhotoHighRes = g.imgPhotoRaw.rotate(g.imgInfoCur.rotate)
	g.imgPhotoLowRes = g.imgPhotoHighRes.thumbnail(1000):box
}

//-----------------------------------------------------------------------------
// SetBlankImage
//-----------------------------------------------------------------------------
SetBlankImage() = {
	g.imgInfoCur = ImageInfo()
	g.imgPhotoRaw = g.imgBlank
	UpdateImagePhoto()
}

//-----------------------------------------------------------------------------
// ReadImageFile
//-----------------------------------------------------------------------------
ReadImageFile(parent:wx.Window, fileName:string) = {
	idx = g.imgInfos:*fileName.find(fileName):index
	if (idx) {
		g.imgInfoCur = g.imgInfos[idx]
	} else {
		g.imgInfoCur = ImageInfo()
		g.imgInfoCur.label = path.basename(path.filename(fileName))
		g.imgInfoCur.fileName = fileName
		g.imgInfos.add(g.imgInfoCur)
	}
	if (g.imgInfoCur.imgPhotoRaw) {
		g.imgPhotoRaw = g.imgInfoCur.imgPhotoRaw
	} else {
		try {
			imgPhotoRaw = image(fileName)
		} catch {
			wx.MessageDialog(parent, 'Failed to read the image file'$,
							'Error'$, wx.OK | wx.ICON_ERROR | wx.CENTRE) {|dlg|
				dlg.ShowModal()
			}
			return
		}
		g.imgPhotoRaw = g.imgInfoCur.imgPhotoRaw = imgPhotoRaw
	}
	UpdateImagePhoto()
}

//-----------------------------------------------------------------------------
// RotateImageL / RotateImageR
//-----------------------------------------------------------------------------
RotateImageL() = {
	g.imgInfoCur.rotate = (g.imgInfoCur.rotate + 270) % 360
	UpdateImagePhoto()
}

RotateImageR() = {
	g.imgInfoCur.rotate = (g.imgInfoCur.rotate + 90) % 360
	UpdateImagePhoto()
}

//-----------------------------------------------------------------------------
// OpenWithApp
//-----------------------------------------------------------------------------
OpenWithApp(fileName:string) = {
	mswin.ole('Wscript.shell') {|wsh| wsh.Run(fileName)}
}

//-----------------------------------------------------------------------------
// ExtractImage
//-----------------------------------------------------------------------------
ExtractImage(imgPhoto:image, layout:Layout, wdMgn:number, htMgn:number) = {
	bgColor = `gray
	[wdDummy, htDummy] = int([imgPhoto.width / 2, imgPhoto.height / 2])
	imgSrc = image(`rgba, imgPhoto.width + wdDummy * 2, imgPhoto.height + htDummy * 2, bgColor)
	// +----+----+----+
	// | NW | N  | NE |
	// +----+----+----+
	// | W  | c  | E  |
	// +----+----+----+
	// | SW | S  | SE |
	// +----+----+----+
	imgSrc.paste(wdDummy, htDummy, imgPhoto)
	// paste dummy on N
	imgSrc.paste(wdDummy, 0,
		imgPhoto.crop(0, 0, imgPhoto.width, htDummy).flip(`vert))
	// paste dummy on S
	imgSrc.paste(wdDummy, htDummy + imgPhoto.height,
		imgPhoto.crop(0, imgPhoto.height - htDummy, imgPhoto.width, htDummy).flip(`vert))
	// paste dummy on W
	imgSrc.paste(0, htDummy,
		imgPhoto.crop(0, 0, wdDummy, imgPhoto.height).flip(`horz))
	// paste dummy on E
	imgSrc.paste(wdDummy + imgPhoto.width, htDummy,
		imgPhoto.crop(imgPhoto.width - wdDummy, 0, wdDummy, imgPhoto.height).flip(`horz))
	// paste dummy on NW
	imgSrc.paste(0, 0,
		imgPhoto.crop(0, 0, wdDummy, htDummy).rotate(180))
	// paste dummy on NE
	imgSrc.paste(wdDummy + imgPhoto.width, 0,
		imgPhoto.crop(imgPhoto.width - wdDummy, 0, wdDummy, htDummy).rotate(180))
	// paste dummy on SW
	imgSrc.paste(0, htDummy + imgPhoto.height,
		imgPhoto.crop(0, imgPhoto.height - htDummy, wdDummy, htDummy).rotate(180))
	// paste dummy on SE
	imgSrc.paste(wdDummy + imgPhoto.width, htDummy + imgPhoto.height,
		imgPhoto.crop(imgPhoto.width - wdDummy, imgPhoto.height - htDummy, wdDummy, htDummy).rotate(180))
	f = g.imgInfoCur.CalcFrameCoord(wx.Rect(wdDummy, htDummy, imgPhoto.width, imgPhoto.height), layout)
	[wdDotMgn, htDotMgn] = f.height * [wdMgn, htMgn] / layout.htImg
	if (g.imgInfoCur.tiltAdjFlag) {
		angleAdj = math.atan2(f.xBtm - f.xTop, f.yBtm - f.yTop):deg
		[xCenter, yCenter] = [imgSrc.width / 2, imgSrc.height / 2]
		imgSrc = imgSrc.rotate(angleAdj, `gray)
		[xPivot, yPivot] = [f.xTop - xCenter, -f.yTop + yCenter]
		[yPivot, xPivot] = matrix.rotation(angleAdj):deg * [yPivot, xPivot]
		[xPivot, yPivot] = [xPivot + imgSrc.width / 2, -yPivot + imgSrc.height / 2]
	} else {
		[xPivot, yPivot] = [f.xTop, f.yTop]
	}
	[xCrop, yCrop] = [xPivot - f.width / 2 - wdDotMgn, yPivot - htDotMgn]
	[wdCrop, htCrop] = [f.width + wdDotMgn * 2, f.height + htDotMgn * 2]
	imgSrc.crop(xCrop, yCrop, wdCrop, htCrop)
}

//-----------------------------------------------------------------------------
// ComposeProduct
//-----------------------------------------------------------------------------
ComposeProduct(cr:cairo.context, imgPhoto:image, layout:Layout,
								paperSize:PaperSize, orientation:symbol) = {
	fontName = 'Sans'
	[wdCanvas, htCanvas] = [paperSize.GetCanvasWidth(orientation), paperSize.GetCanvasHeight(orientation)]
	scope {
		cr.select_font_face(fontName, cairo.FONT_SLANT_NORMAL, cairo.FONT_WEIGHT_NORMAL)
		cr.set_source_rgb(.2, .2, 1)
		cr.set_font_size(3.0)
		cr.move_to(0, htCanvas - 1)
		text = format('[%d x %dmm] %s', layout.htImg, layout.wdImg, g.imgInfoCur.label)
		if (!layout.purpose.isempty()) {
			text += format(' for %s', layout.purpose)
		}
		cr.show_text(text)
	}
	imgExtract = ExtractImage(imgPhoto, layout, g.wdMgn, g.htMgn).thumbnail(1000):box
	cairo.pattern.create_for_surface(imgExtract) {|pattern|
		cr.set_line_width(.1)
		cr.set_source_rgb(.2, .2, 1)
		[wdImgEx, htImgEx] = layout.CalcSizeEx()
		[nx, ny] = layout.CalcImageGrid(wdCanvas, htCanvas)
		wdFrame = wdCanvas / nx
		htFrame = (htCanvas - g.htMessage) / ny
		repeat(nx) {|ix|
			xFrame = wdFrame * ix
			x = xFrame + (wdFrame - wdImgEx) / 2
			cr.move_to(x + g.wdMgn, 0)
			cr.line_to(x + g.wdMgn, htCanvas - g.htMessage)
			cr.move_to(x + wdImgEx - g.wdMgn, 0)
			cr.line_to(x + wdImgEx - g.wdMgn, htCanvas - g.htMessage)
			cr.stroke()
		}
		repeat(ny) {|iy|
			yFrame = htFrame * iy
			y = yFrame + (htFrame - htImgEx) / 2
			cr.move_to(0, y + g.htMgn)
			cr.line_to(wdCanvas, y + g.htMgn)
			cr.move_to(0, y + htImgEx - g.htMgn)
			cr.line_to(wdCanvas, y + htImgEx - g.htMgn)
			cr.stroke()
		}
		cross(ix in range(nx), iy in range(ny)) {
			xFrame = wdFrame * ix
			yFrame = htFrame * iy
			x = xFrame + (wdFrame - wdImgEx) / 2
			y = yFrame + (htFrame - htImgEx) / 2
			cr.save {
				scale = htImgEx / imgExtract.height
				cr.translate(x, y)
				cr.scale(scale, scale)
				cr.set_source(pattern)
				cr.paint()
			}
		}
	}
}

ComposeProductPDF(fileName:string, imgPhoto:image, layout:Layout,
									paperSize:PaperSize, orientation:symbol) = {
	cairo.create(cairo.pdf_surface.create(fileName,
					units.mm$pt(paperSize.GetCanvasWidth(orientation)),
					units.mm$pt(paperSize.GetCanvasHeight(orientation)))) {|cr|
		scale = 72 / 25.4
		cr.scale(scale, scale)
		ComposeProduct(cr, imgPhoto, layout, paperSize, orientation)
		cr.show_page()
	}
}

//-----------------------------------------------------------------------------
// ProductViewer
//-----------------------------------------------------------------------------
ProductViewer = class(wx.Panel) {
	// constructor
	__init__(parent:wx.Windowm, style:number) = {|parent, style => (style | wx.HSCROLL | wx.VSCROLL)|
		this.bmpScreen = nil
		this.brushBg = wx.Brush(wx.Colour(240, 240, 240), wx.BRUSHSTYLE_SOLID)
		// bind event handlers
		this.Bind(wx.EVT_ERASE_BACKGROUND) { /* nothing to do */ }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
		this.Bind(wx.EVT_SCROLLWIN) {|event| this.OnScrollWin(event)}
	}
	// methods
	UpdateContent(blankFlag:boolean => false) = {
		[wdScreenMgn, htScreenMgn] = [8, 8]
		orientation = g.paperSizeCur.GetBetterOrientation(g.layoutCur, g.orientation)
		wdCanvas = g.paperSizeCur.GetCanvasWidth(orientation)
		htCanvas = g.paperSizeCur.GetCanvasHeight(orientation)
		if (wdCanvas < htCanvas) {
			wdImg = 400, htImg = int(wdImg * htCanvas / wdCanvas)
		} else {
			htImg = 400, wdImg = int(htImg * wdCanvas / htCanvas)
		}
		img = image(`rgba, wdImg, htImg, `white)
		if (!blankFlag) {
			img.cairo {|cr|
				scale = wdImg / wdCanvas
				cr.scale(scale, scale)
				ComposeProduct(cr, g.imgPhotoLowRes,
								g.layoutCur, g.paperSizeCur, orientation)
			}
		}
		[wdClient, htClient] = this.GetClientSizeWH()
		wdScreen = max(wdClient, img.width + wdScreenMgn * 2)
		htScreen = max(htClient, img.height + htScreenMgn * 2)
		this.bmpScreen = wx.BitmapWH(wdScreen, htScreen)
		wx.MemoryDC(this.bmpScreen) {|dc|
			dc.SetBackground(this.brushBg)
			dc.Clear()
			[x, y] = [(wdScreen - img.width) / 2, (htScreen - img.height) / 2]
			dc.DrawBitmap(img, x, y, false)
		}
		x = this.GetScrollPos(wx.HORIZONTAL)
		y = this.GetScrollPos(wx.VERTICAL)
		this.SetScrollbar(wx.HORIZONTAL, x, wdClient, wdScreen)
		this.SetScrollbar(wx.VERTICAL, y, htClient, htScreen)
		this.Refresh()
		this.Update()
	}
	// event handler
	OnSize(event:wx.SizeEvent) = {
		this.UpdateContent()
		event.Skip()
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		x = this.GetScrollPos(wx.HORIZONTAL)
		y = this.GetScrollPos(wx.VERTICAL)
		this.bmpScreen && dc.DrawBitmap(this.bmpScreen, -x, -y, false)
		dc = nil
	}
	OnScrollWin(event:wx.ScrollWinEvent) = {
		eventType = event.GetEventType()
		orientation = event.GetOrientation()
		if (eventType == wx.EVT_SCROLLWIN_TOP.GetEventType()) {
			pos = 0
		} elsif (eventType == wx.EVT_SCROLLWIN_BOTTOM.GetEventType()) {
			pos = this.GetScrollRange(orientation)
		} elsif (eventType == wx.EVT_SCROLLWIN_LINEUP.GetEventType()) {
			pos = this.GetScrollPos(orientation) - 10
		} elsif (eventType == wx.EVT_SCROLLWIN_LINEDOWN.GetEventType()) {
			pos = this.GetScrollPos(orientation) + 10
		} elsif (eventType == wx.EVT_SCROLLWIN_PAGEUP.GetEventType()) {
			pos = this.GetScrollPos(orientation) - 100
		} elsif (eventType == wx.EVT_SCROLLWIN_PAGEDOWN.GetEventType()) {
			pos = this.GetScrollPos(orientation) + 100
		} elsif (eventType == wx.EVT_SCROLLWIN_THUMBTRACK.GetEventType()) {
			pos = event.GetPosition()
		} elsif (eventType == wx.EVT_SCROLLWIN_THUMBRELEASE.GetEventType()) {
			pos = event.GetPosition()
		}
		this.SetScrollPos(orientation, pos)
		this.Refresh()
	}
}

//-----------------------------------------------------------------------------
// Extractor
//-----------------------------------------------------------------------------
Extractor = class(wx.Panel) {
	// constructor
	__init__(parent:wx.Window, style:number, productViewer:ProductViewer) = \
													{|parent, style => style|
		this.productViewer = productViewer
		this.grabTgt = nil
		this.bmpScreen = nil
		this.rcImg = wx.Rect(0, 0, 0, 0)
		this.penCursor = wx.Pen(wx.Colour(255, 128, 128), 2, wx.PENSTYLE_SOLID)
		this.penCenterGuide = wx.Pen(wx.Colour(255, 128, 128), 1, wx.PENSTYLE_SOLID)
		this.brushBg = wx.Brush(wx.Colour(128, 128, 128), wx.BRUSHSTYLE_SOLID)
		this.brushCursor = wx.Brush(wx.Colour(255, 255, 255), wx.BRUSHSTYLE_SOLID)
		this.DragAcceptFiles(true)
		this.mapColorLevel = interval(64, 140, 256):list
		// bind event handlers
		this.Bind(wx.EVT_ERASE_BACKGROUND) { /* nothing to do */ }
		this.Bind(wx.EVT_SIZE) {|event| this.OnSize(event)}
		this.Bind(wx.EVT_PAINT) {|event| this.OnPaint(event)}
		this.Bind(wx.EVT_LEFT_DOWN) {|event| this.OnLeftDown(event)}
		this.Bind(wx.EVT_LEFT_UP) {|event| this.OnLeftUp(event)}
		this.Bind(wx.EVT_MOUSE_CAPTURE_LOST) {|event| this.OnMouseCaptureLost(event)}
		this.Bind(wx.EVT_MOTION) {|event| this.OnMotion(event)}
		this.Bind(wx.EVT_DROP_FILES) {|event| this.OnDropFiles(event)}
	}
	// methods
	SenseBox(pt:wx.Point) = {
		f = g.imgInfoCur.CalcFrameCoord(this.rcImg, g.layoutCur)
		if (g.imgInfoCur.tiltAdjFlag) {
			[wdSense, htSense] = [6, 6]
			wx.Rect(f.xMarkTop - wdSense / 2, f.yMarkTop - htSense / 2, wdSense, htSense).Contains(pt) && return (`topPoint)
			wx.Rect(f.xMarkBtm - wdSense / 2, f.yMarkBtm - htSense / 2, wdSense, htSense).Contains(pt) && return (`btmPoint)
		} else {
			[wdSense, htSense] = [6, 6]
			wx.Rect(f.xMarkTop - f.width / 4, f.yMarkTop - htSense / 2, f.width, htSense).Contains(pt) && return(`topLine)
			wx.Rect(f.xMarkTop - f.width / 4, f.yMarkBtm - htSense / 2, f.width, htSense).Contains(pt) && return(`btmLine)
			wx.Rect(f.xMarkTop - wdSense / 2, f.yMarkTop, wdSense, f.yMarkBtm - f.yMarkTop).Contains(pt) && return(`center)
		}
		nil
	}
	UpdateContent(blankFlag:boolean => false) = {
		if (blankFlag) {
			this.BlankImageScreen()
		} else {
			this.UpdateImageScreen()
		}
		this.Refresh()
		this.Update()
	}
	BlankImageScreen() = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.bmpScreen = wx.BitmapWH(wdClient, htClient)
		wx.MemoryDC(this.bmpScreen) {|dc|
			dc.SetBackground(this.brushBg)
			dc.Clear()
		}
	}
	UpdateImageScreen() = {
		[wdClient, htClient] = this.GetClientSizeWH()
		this.bmpScreen = wx.BitmapWH(wdClient, htClient)
		img = g.imgPhotoLowRes.thumbnail(wdClient, htClient)
		imgFrosted = img.mapcolorlevel(this.mapColorLevel)
		[xOffset, yOffset] = [(wdClient - img.width) / 2, (htClient - img.height) / 2]
		this.rcImg = wx.Rect(xOffset, yOffset, img.width, img.height)
		wx.MemoryDC(this.bmpScreen) {|dc|
			dc.SetBackground(this.brushBg)
			dc.Clear()
			if (g.frostFrameFlag) {
				dc.DrawBitmap(imgFrosted, xOffset, yOffset, false)
				f = g.imgInfoCur.CalcFrameCoord(this.rcImg, g.layoutCur)
				angle = math.atan2(f.yBtm - f.yTop, f.xBtm - f.xTop)
				[xOffset1, yOffset1, xOffset2, yOffset2] = [
					math.cos(angle - math.pi / 2)
					math.sin(angle - math.pi / 2)
					math.cos(angle + math.pi / 2)
					math.sin(angle + math.pi / 2)
				] * f.width / 2
				ptTbl = @(wx.Point) {
					{f.xTop + xOffset1, f.yTop + yOffset1},
					{f.xTop + xOffset2, f.yTop + yOffset2},
					{f.xBtm + xOffset2, f.yBtm + yOffset2},
					{f.xBtm + xOffset1, f.yBtm + yOffset1},
				}
				dc.SetClippingRegionAsRegion(wx.RegionPoints(ptTbl))
			}
			dc.DrawBitmap(img, xOffset, yOffset, false)
		}
	}
	// event handler
	OnSize(event:wx.SizeEvent) = {
		this.UpdateContent()
		event.Skip()
	}
	OnPaint(event:wx.PaintEvent) = {
		dc = wx.PaintDC(this)
		this.UpdateImageScreen()
		dc.DrawBitmap(this.bmpScreen, 0, 0, false)
		f = g.imgInfoCur.CalcFrameCoord(this.rcImg, g.layoutCur)
		dc.SetPen(this.penCursor)
		dc.SetBrush(this.brushCursor)
		angle = math.atan2(f.yMarkBtm - f.yMarkTop, f.xMarkBtm - f.xMarkTop)
		[xOffset1, yOffset1, xOffset2, yOffset2] = [
			math.cos(angle - math.pi / 2)
			math.sin(angle - math.pi / 2)
			math.cos(angle + math.pi / 2)
			math.sin(angle + math.pi / 2)
		] * f.width / 4
		[xCenter, yCenter] = [(f.xMarkTop + f.xMarkBtm) / 2, (f.yMarkTop + f.yMarkBtm) / 2]
		dc.DrawLine(f.xMarkTop, f.yMarkTop, f.xMarkBtm, f.yMarkBtm)
		dc.DrawLine(f.xMarkTop + xOffset1, f.yMarkTop + yOffset1, f.xMarkTop + xOffset2, f.yMarkTop + yOffset2)
		dc.DrawLine(f.xMarkBtm + xOffset1, f.yMarkBtm + yOffset1, f.xMarkBtm + xOffset2, f.yMarkBtm + yOffset2)
		if (g.centerGuideFlag) {
			[xOffset1, yOffset1, xOffset2, yOffset2] = [
				math.cos(angle - math.pi / 2)
				math.sin(angle - math.pi / 2)
				math.cos(angle + math.pi / 2)
				math.sin(angle + math.pi / 2)
			] * f.width / 3
			dc.SetPen(this.penCenterGuide)
			dc.DrawLine(xCenter + xOffset1, yCenter + yOffset1, xCenter + xOffset2, yCenter + yOffset2)
		}
		if (g.imgInfoCur.tiltAdjFlag) {
			dc.DrawCircle(f.xMarkTop, f.yMarkTop, 4)
			dc.DrawCircle(f.xMarkBtm, f.yMarkBtm, 4)
		}
		dc = nil
	}
	OnLeftDown(event:wx.MouseEvent) = {
		if (!this.grabTgt) {
			this.grabTgt = this.SenseBox(event.GetPosition())
		}
		!this.HasCapture() && this.CaptureMouse()
	}
	OnLeftUp(event:wx.MouseEvent) = {
		this.HasCapture() && this.ReleaseMouse()
		if (this.grabTgt) {
			this.grabTgt = nil
			wx.BusyCursor {
				this.productViewer.UpdateContent(true)
				this.productViewer.UpdateContent()
			}
		}
	}
	OnMouseCaptureLost(event:wx.MouseCaptureLost) = {
		if (this.grabTgt) {
			this.grabTgt = nil
		}
	}
	OnMotion(event:wx.MouseEvent) = {
		rtn = this.SenseBox(event.GetPosition())
		if (rtn == `center) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_SIZEWE))
		} elsif (rtn in [`topLine, `btmLine]) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_SIZENS))
		} elsif (rtn in [`topPoint, `btmPoint]) {
			this.SetCursor(wx.StockCursor(wx.CURSOR_CROSS))
		} else {
			this.SetCursor(wx.StockCursor(wx.CURSOR_ARROW))
		}
		pt = event.GetPosition()
		if (this.grabTgt == `center) {
			g.imgInfoCur.xrateTop = (pt.x - this.rcImg.x) / this.rcImg.width
			if (g.imgInfoCur.xrateTop > 1) {
				g.imgInfoCur.xrateTop = 1
			} elsif (g.imgInfoCur.xrateTop < 0) {
				g.imgInfoCur.xrateTop = 0
			}
			g.imgInfoCur.xrateBtm = g.imgInfoCur.xrateTop
			this.Refresh()
		} elsif (this.grabTgt == `topLine) {
			g.imgInfoCur.yrateTop = (pt.y - this.rcImg.y) / this.rcImg.height
			if (g.imgInfoCur.yrateTop < 0) {
				g.imgInfoCur.yrateTop = 0
			} elsif (g.imgInfoCur.yrateTop > g.imgInfoCur.yrateBtm - .1) {
				g.imgInfoCur.yrateTop = g.imgInfoCur.yrateBtm - .1
			}
			this.Refresh()
		} elsif (this.grabTgt == `btmLine) {
			g.imgInfoCur.yrateBtm = (pt.y - this.rcImg.y) / this.rcImg.height
			if (g.imgInfoCur.yrateBtm > 1) {
				g.imgInfoCur.yrateBtm = 1
			} elsif (g.imgInfoCur.yrateBtm < g.imgInfoCur.yrateTop + .1) {
				g.imgInfoCur.yrateBtm = g.imgInfoCur.yrateTop + .1
			}
			this.Refresh()
		} elsif (this.grabTgt == `topPoint) {
			g.imgInfoCur.xrateTop = (pt.x - this.rcImg.x) / this.rcImg.width
			g.imgInfoCur.yrateTop = (pt.y - this.rcImg.y) / this.rcImg.height
			if (g.imgInfoCur.xrateTop > 1) {
				g.imgInfoCur.xrateTop = 1
			} elsif (g.imgInfoCur.xrateTop < 0) {
				g.imgInfoCur.xrateTop = 0
			}
			if (g.imgInfoCur.yrateTop < 0) {
				g.imgInfoCur.yrateTop = 0
			} elsif (g.imgInfoCur.yrateTop > g.imgInfoCur.yrateBtm - .1) {
				g.imgInfoCur.yrateTop = g.imgInfoCur.yrateBtm - .1
			}
			this.Refresh()
		} elsif (this.grabTgt == `btmPoint) {
			g.imgInfoCur.xrateBtm = (pt.x - this.rcImg.x) / this.rcImg.width
			g.imgInfoCur.yrateBtm = (pt.y - this.rcImg.y) / this.rcImg.height
			if (g.imgInfoCur.xrateBtm > 1) {
				g.imgInfoCur.xrateBtm = 1
			} elsif (g.imgInfoCur.xrateBtm < 0) {
				g.imgInfoCur.xrateBtm = 0
			}
			if (g.imgInfoCur.yrateBtm > 1) {
				g.imgInfoCur.yrateBtm = 1
			} elsif (g.imgInfoCur.yrateBtm < g.imgInfoCur.yrateTop + .1) {
				g.imgInfoCur.yrateBtm = g.imgInfoCur.yrateTop + .1
			}
			this.Refresh()
		}
	}
	OnDropFiles(event:wx.DropFilesEvent) = {
		fileNames = event.GetFiles()
		ReadImageFile(this, fileNames[0])
		this.UpdateContent()
		this.productViewer.UpdateContent()
	}
}

//-----------------------------------------------------------------------------
// wx.Menu expansion
//-----------------------------------------------------------------------------
wx.Menu.AppendEx(id:number, text:string, img:image, kind:number => wx.ITEM_NORMAL) = {
	imgTmp = image(`rgba, img.width + 8, img.height)
	imgTmp.paste(0, 0, img)
	item = wx.MenuItem(this, id, text, kind => kind)
	item.SetBitmap(imgTmp)
	this.AppendItem(item)
}

//-----------------------------------------------------------------------------
// Frame
//-----------------------------------------------------------------------------
Frame = class(wx.Frame) {
	__init__(title:string, pos:wx.Point => wx.Point(g.xFrame, g.yFrame),
			size:wx.Size => wx.Size(g.wdFrame, g.htFrame)) = {|nil, wx.ID_ANY, title, pos, size|
		this.SetIcon(g.icon)
		menuBar = wx.MenuBar()
		wx.Menu {|m|
			menuBar.Append(m, '&File'$)
			m.AppendEx(ID_Open,			'&Open Image...\tCtrl-O'$,		g.imgOpen)
			m.AppendEx(ID_Close,		'&Close Image...\tCtrl-L'$,		g.imgClose)
			m.AppendEx(ID_ShowList,		'&Show Image List...\tCtrl-S'$,	g.imgShowList)
			m.AppendEx(ID_Prev,			'&Previous\tCtrl-P'$,			g.imgPrev)
			m.AppendEx(ID_Next,			'&Next\tCtrl-N'$,				g.imgNext)
			m.AppendSeparator()
			m.Append(wx.ID_CLOSE,		'E&xit\tAlt-X'$)
		}
		wx.Menu {|m|
			menuBar.Append(m, '&Image'$)
			m.AppendEx(ID_RenameLabel,			'&Rename Label'$,			g.imgRenameLabel)
			m.AppendEx(ID_RotateL,				'Rotate &Left\tCtrl-L'$,	g.imgRotateL)
			m.AppendEx(ID_RotateR,				'Rotate R&ight\tCtrl-I'$,	g.imgRotateR)
			m.AppendSeparator()
			m.AppendCheckItem(ID_TiltAdj,		'&Tilt Adjust&t\tCtrl-T'$)
			m.AppendCheckItem(ID_FrostFrame,	'&Frost Frame'$)
			m.AppendCheckItem(ID_CenterGuide,	'C&enter Guide'$)
			m.AppendSeparator()
			m.Append(ID_CopyExtractedImage,		'&Copy Extracted Image\tCtrl-C'$)
			m.Append(ID_SaveExtractedImage,		'&Save Extracted Image'$)
		}
		wx.Menu {|m|
			menuBar.Append(m, '&Output'$)
			m.AppendRadioItem(ID_OrientVert,	'Orientation V&ertical'$)
			m.AppendRadioItem(ID_OrientHorz,	'Orientation &Horizontal'$)
			m.AppendRadioItem(ID_OrientAuto,	'Orientation &Auto'$)
			m.AppendSeparator()
			m.Append(ID_OutputPDF,				'&Output PDF...\tCtrl-U'$)
			m.Append(ID_LaunchPDFViewer,		'Launch PDF &Viewer...\tCtrl-V'$)
		}
		wx.Menu {|m|
			menuBar.Append(m, '&Help'$)
			m.Append(wx.ID_ABOUT,		'&About'$)
		}
		this.SetMenuBar(menuBar)
		this.CreateToolBar(wx.TB_FLAT) {|tb|
			tb.AddTool(ID_Open,			'Open Image'$,		g.imgOpen,			wx.NullBitmap, wx.ITEM_NORMAL,	'Open Image'$)
			tb.AddTool(ID_Close,		'Close Image'$,		g.imgClose,			wx.NullBitmap, wx.ITEM_NORMAL,	'Close Image'$)
			tb.AddTool(ID_ShowList,		'Show Image List'$,	g.imgShowList,		wx.NullBitmap, wx.ITEM_NORMAL,	'Show Image List'$)
			tb.AddSeparator()
			tb.AddTool(ID_Prev,			'Previous'$,		g.imgPrev,			wx.NullBitmap, wx.ITEM_NORMAL,	'Previous'$)
			tb.AddTool(ID_Next,			'Next'$,			g.imgNext,			wx.NullBitmap, wx.ITEM_NORMAL,	'Next'$)
			tb.AddSeparator()
			tb.AddTool(ID_RenameLabel,	'Rename Label'$,	g.imgRenameLabel,	wx.NullBitmap, wx.ITEM_NORMAL,	'Rename Label'$)
			tb.AddTool(ID_RotateL,		'Rotate Left'$,		g.imgRotateL,		wx.NullBitmap, wx.ITEM_NORMAL,	'Rotate Left'$)
			tb.AddTool(ID_RotateR,		'Rotate Right'$,	g.imgRotateR,		wx.NullBitmap, wx.ITEM_NORMAL,	'Rotate Right'$)
			tb.AddSeparator()
			tb.AddTool(ID_TiltAdj,		'Tilt Adjust'$,		g.imgTiltAdj,		wx.NullBitmap, wx.ITEM_CHECK,	'Tilt Adjust'$)
			tb.AddTool(ID_FrostFrame,	'Frost Frame'$,		g.imgFrostFrame,	wx.NullBitmap, wx.ITEM_CHECK,	'Frost Frame'$)
			tb.AddTool(ID_CenterGuide,	'Center Guide'$,	g.imgCenterGuide,	wx.NullBitmap, wx.ITEM_CHECK,	'Center Guide'$)
			tb.AddSeparator()
			tb.AddTool(ID_OrientVert,	'Orientation Vertical'$,	g.imgOrientVert,		wx.NullBitmap, wx.ITEM_RADIO,	'Orientation Vertical'$)
			tb.AddTool(ID_OrientHorz,	'Orientation Horizontal'$,	g.imgOrientHorz,		wx.NullBitmap, wx.ITEM_RADIO,	'Orientation Horizontal'$)
			tb.AddTool(ID_OrientAuto,	'Orientation Auto'$,		g.imgOrientAuto,		wx.NullBitmap, wx.ITEM_RADIO,	'Orientation Auto'$)
			tb.AddStretchableSpace()
			wx.ComboBox(tb, wx.ID_ANY, size => wx.Size(200, -1), style => wx.CB_READONLY) {|ctrl|
				tb.AddControl(ctrl, 'Paper Size')
				ctrl.Append(format('%s (%d x %dmm)', g.paperSizeTbl:*name,
							g.paperSizeTbl:*height, g.paperSizeTbl:*width)):void
				ctrl.Select(g.paperSizeTbl.find(g.paperSizeCur):index || 0)
				this.cbPaperSize = ctrl
				ctrl.Bind(wx.EVT_COMBOBOX) {|event| this.OnComboBox_PaperSize(event)}
			}
			tb.Realize()
		}
		wx.SashLayoutWindow(this, wx.ID_ANY,
					style => wx.BORDER_NONE | wx.CLIP_CHILDREN) {|sash|
			sash.SetDefaultSize(wx.Size(1000, g.htSashTop));
			sash.SetOrientation(wx.LAYOUT_HORIZONTAL);
			sash.SetAlignment(wx.LAYOUT_TOP);
			sash.SetSashVisible(wx.SASH_BOTTOM, true);
			this.sashTop = sash
		}
		this.panelTop = wx.Panel(this.sashTop)
		wx.SashLayoutWindow(this.panelTop, wx.ID_ANY,
					style => wx.BORDER_NONE | wx.CLIP_CHILDREN) {|sash|
			sash.SetDefaultSize(wx.Size(g.wdSashLeft, 1000));
			sash.SetOrientation(wx.LAYOUT_VERTICAL);
			sash.SetAlignment(wx.LAYOUT_LEFT);
			sash.SetSashVisible(wx.SASH_RIGHT, true);
			this.sashLeft = sash
		}
		this.panelLeft = wx.Panel(this.sashLeft)
		this.productViewer = ProductViewer(this, wx.BORDER_SUNKEN)
		this.extractor = Extractor(this.panelLeft, wx.BORDER_SUNKEN, this.productViewer)
		this.extractor.Bind(wx.EVT_RIGHT_DOWN) {|event| this.OnRightDown_Label(event)}
		wx.BoxSizer(wx.VERTICAL) {|vbox|
			this.panelLeft.SetSizer(vbox)
			vbox.Add(this.extractor, wx.SizerFlags(1).Expand())
			wx.StaticText(this.panelLeft, ID_Label, '',
					style => wx.ALIGN_CENTRE_HORIZONTAL | wx.ST_NO_AUTORESIZE) {|ctrl|
				vbox.Add(ctrl, wx.SizerFlags().Expand().Border(wx.TOP, 2))
				ctrl.Bind(wx.EVT_RIGHT_DOWN) {|event| this.OnRightDown_Label(event)}
			}
		}
		wx.ListCtrl(this.panelTop, wx.ID_ANY, style => wx.BORDER_SUNKEN | wx.LC_REPORT) {|ctrl|
			font = ctrl.GetFont()
			font.SetPointSize(11)
			ctrl.SetFont(font)
			ctrl.InsertColumn(0.., ['Size'$, 'Purpose'$])
			ctrl.Bind(wx.EVT_SIZE) {|event|
				size = event.GetSize()
				width = size.GetWidth() - 25
				wdColumn = 150
				ctrl.SetColumnWidth(0, wdColumn)
				width -= wdColumn
				ctrl.SetColumnWidth(1, width)
				event.Skip()
			}
			g.layoutTbl.each {|layout, idx|
				wx.ListItem {|item|
					item.SetId(idx)
					item.SetText('%d x %dmm' % [layout.htImg, layout.wdImg])
					ctrl.InsertItem(item)
				}
				wx.ListItem {|item|
					item.SetId(idx)
					item.SetColumn(1)
					item.SetText(layout.purpose)
					ctrl.SetItem(item)
				}
			}
			ctrl.SetItemState(0,
					wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED,
					wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED)
			ctrl.Bind(wx.EVT_LIST_ITEM_SELECTED) {|event| this.OnListItemSelected(event) }
			this.listCtrlLayout = ctrl
		}
		this.listCtrlLayout.SetFocus()
		this.Bind(wx.EVT_MOVE) {|event| this.UpdateSizePosInfo(), event.Skip()}
		this.Bind(wx.EVT_MENU, wx.ID_CLOSE)			{|event| this.Close()}
		this.Bind(wx.EVT_MENU, ID_Open)				{|event| this.OnMenu_Open(event)}
		this.Bind(wx.EVT_MENU, ID_Close)			{|event| this.OnMenu_Close(event)}
		this.Bind(wx.EVT_MENU, ID_ShowList)			{|event| this.OnMenu_ShowList(event)}
		this.Bind(wx.EVT_MENU, ID_Prev)				{|event| this.OnMenu_Prev(event)}
		this.Bind(wx.EVT_MENU, ID_Next)				{|event| this.OnMenu_Next(event)}
		this.Bind(wx.EVT_MENU, ID_OutputPDF)		{|event| this.OnMenu_OutputPDF(event)}
		this.Bind(wx.EVT_MENU, ID_LaunchPDFViewer)	{|event| this.OnMenu_LaunchPDFViewer(event)}
		this.Bind(wx.EVT_MENU, ID_RenameLabel)		{|event| this.OnMenu_RenameLabel(event)}
		this.Bind(wx.EVT_MENU, ID_RotateL)			{|event| this.OnMenu_RotateL(event)}
		this.Bind(wx.EVT_MENU, ID_RotateR)			{|event| this.OnMenu_RotateR(event)}
		this.Bind(wx.EVT_MENU, ID_TiltAdj)			{|event| this.OnMenu_TiltAdj(event)}
		this.Bind(wx.EVT_MENU, ID_FrostFrame)		{|event| this.OnMenu_FrostFrame(event)}
		this.Bind(wx.EVT_MENU, ID_CenterGuide)		{|event| this.OnMenu_CenterGuide(event)}
		this.Bind(wx.EVT_MENU, ID_CopyExtractedImage) {|event| this.OnMenu_CopyExtractedImage(event)}
		this.Bind(wx.EVT_MENU, ID_SaveExtractedImage) {|event| this.OnMenu_SaveExtractedImage(event)}
		this.Bind(wx.EVT_MENU, ID_OrientVert)		{|event| this.OnMenu_OrientVert(event)}
		this.Bind(wx.EVT_MENU, ID_OrientHorz)		{|event| this.OnMenu_OrientHorz(event)}
		this.Bind(wx.EVT_MENU, ID_OrientAuto)		{|event| this.OnMenu_OrientAuto(event)}
		this.Bind(wx.EVT_MENU, wx.ID_ABOUT)			{|event| this.OnMenu_About(event)}
		this.Bind(wx.EVT_SIZE) {|event|
			wx.LayoutAlgorithm().LayoutWindow(this, this.productViewer)
			this.UpdateSizePosInfo()
			event.Skip()
		}
		this.Bind(wx.EVT_SASH_DRAGGED) {|event|
			if (event.GetDragStatus() != wx.SASH_STATUS_OUT_OF_RANGE) {
				id = event.GetId()
				if (id == this.sashTop.GetId()) {
					g.htSashTop = event.GetDragRect().GetHeight() + 2
					this.sashTop.SetDefaultSize(wx.Size(1000, g.htSashTop))
				}
				wx.LayoutAlgorithm().LayoutWindow(this, this.productViewer)
				this.productViewer.Refresh()
			}
		}
		this.panelTop.Bind(wx.EVT_SIZE) {|event|
			wx.LayoutAlgorithm().LayoutWindow(this.panelTop, this.listCtrlLayout)
			event.Skip()
		}
		this.panelTop.Bind(wx.EVT_SASH_DRAGGED) {|event|
			if (event.GetDragStatus() != wx.SASH_STATUS_OUT_OF_RANGE) {
				id = event.GetId()
				if (id == this.sashLeft.GetId()) {
					g.wdSashLeft = event.GetDragRect().GetWidth() + 2
					this.sashLeft.SetDefaultSize(wx.Size(g.wdSashLeft, 1000))
				}
				wx.LayoutAlgorithm().LayoutWindow(this.panelTop, this.listCtrlLayout)
				this.listCtrlLayout.Refresh()
			}
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_Label) {|event|
			text = if (g.imgInfoCur.fileName.isempty()) {
				'(drag image into above area)'$
			} else {
				g.imgInfoCur.label
			}
			event.SetText(text)
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_Close) {|event|
			event.Enable(!g.imgInfoCur.fileName.isempty())
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_RenameLabel) {|event|
			event.Enable(!g.imgInfoCur.fileName.isempty())
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_ShowList) {|event|
			event.Enable(!g.imgInfos.isempty())
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_Prev) {|event|
			idx = g.imgInfos.find(g.imgInfoCur):index
			event.Enable(idx && idx > 0)
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_Next) {|event|
			idx = g.imgInfos.find(g.imgInfoCur):index
			event.Enable(idx && idx < g.imgInfos.len() - 1)
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_TiltAdj) {|event|
			event.Check(g.imgInfoCur.tiltAdjFlag)
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_FrostFrame) {|event|
			event.Check(g.frostFrameFlag)
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_CenterGuide) {|event|
			event.Check(g.centerGuideFlag)
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_OrientVert) {|event|
			event.Check(g.orientation == `vertical)
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_OrientHorz) {|event|
			event.Check(g.orientation == `horizontal)
		}
		this.Bind(wx.EVT_UPDATE_UI,	ID_OrientAuto) {|event|
			event.Check(g.orientation == `auto)
		}
	}
	UpdateSizePosInfo() = {
		(this.IsIconized() || this.IsMaximized()) && return
		[g.xFrame, g.yFrame] = this.GetScreenPositionXY()
		[g.wdFrame, g.htFrame] = this.GetSizeWH()
	}
	UpdateWholeContent(blankFlag:boolean => false) = {
		this.extractor.UpdateContent(blankFlag)
		this.productViewer.UpdateContent(blankFlag)
	}
	ProcessImage() {block} = {
		wx.BusyCursor {
			this.UpdateWholeContent(true)
			block()
			this.UpdateWholeContent()
		}
	}
	OnListItemSelected(event:wx.ListEvent) = {
		idx = event.GetIndex()
		(idx < 0) && return
		g.layoutCur = g.layoutTbl[idx]
		this.Update()
		wx.BusyCursor {
			this.UpdateWholeContent()
		}
	}
	OnRightDown_Label(event:wx.MouseEvent) = {
		wx.Menu() {|m|
			m.AppendEx(ID_RenameLabel,			'&Rename Label'$,			g.imgRenameLabel)
			m.AppendEx(ID_RotateL,				'Rotate &Left\tCtrl-L'$,	g.imgRotateL)
			m.AppendEx(ID_RotateR,				'Rotate R&ight\tCtrl-I'$,	g.imgRotateR)
			m.AppendSeparator()
			m.AppendCheckItem(ID_TiltAdj,		'&Tilt Adjust&t\tCtrl-T'$)
			m.AppendCheckItem(ID_FrostFrame,	'&Frost Frame'$)
			m.AppendCheckItem(ID_CenterGuide,	'C&enter Guide'$)
			m.AppendSeparator()
			m.Append(ID_CopyExtractedImage,		'&Copy Extracted Image\tCtrl-C'$)
			m.Append(ID_SaveExtractedImage,		'&Save Extracted Image'$)
			this.PopupMenu(m)
		}
	}
	OnComboBox_PaperSize(event:wx.CommandEvent) = {
		g.paperSizeCur = g.paperSizeTbl[this.cbPaperSize.GetCurrentSelection()]
		wx.BusyCursor {
			this.productViewer.UpdateContent(this)
			this.productViewer.UpdateContent()
		}
	}
	OnMenu_Open(event:wx.CommandEvent) = {
		filter = 'Image files (*.jpg;*.png;*.gif;*.bmp)|*.jpg;*.png;*.gif;*.bmp|All files (*.*)|*.*'$
		dlg = wx.FileDialog(this, 'Choose an image file'$,
								'', g.imgInfoCur.fileName, filter, wx.FD_OPEN)
		if (dlg.ShowModal() == wx.ID_OK) {
			fileName = dlg.GetPath()
			ReadImageFile(this, fileName)
			this.UpdateWholeContent()
		}
	}
	OnMenu_Close(event:wx.CommandEvent) = {
		!(idx = g.imgInfos.find(g.imgInfoCur):index) && return
		wx.MessageDialog(this, 'Are you sure to close the current image?'$,
				'Confirm'$, wx.OK | wx.CANCEL | wx.OK_DEFAULT | \
										wx.ICON_QUESTION | wx.CENTRE) {|dlg|
			(dlg.ShowModal() != wx.ID_OK) && return
		}
		g.imgInfos.erase(idx)
		if (g.imgInfos.isempty()) {
			this.ProcessImage {
				SetBlankImage()
			}
		} else {
			if (idx >= g.imgInfos.len()) {
				idx = g.imgInfos.len() - 1
			}
			imgInfo = g.imgInfos[idx]
			this.ProcessImage {
				ReadImageFile(this, imgInfo.fileName)
			}
		}
	}
	OnMenu_ShowList(event:wx.CommandEvent) = {
		g.imgInfos.isempty() && return
		dlg = ImageListDialog(this, g.imgInfos, g.imgInfos.find(g.imgInfoCur):index)
		dlg.ShowModal()
		g.imgInfos = dlg.GetImageInfos()
		if (imgInfo = dlg.GetImageInfo()) {
			this.ProcessImage {
				ReadImageFile(this, imgInfo.fileName)
			}
		}
	}
	OnMenu_Prev(event:wx.CommandEvent) = {
		idx = g.imgInfos.find(g.imgInfoCur):index
		if (idx && idx > 0) {
			imgInfo = g.imgInfos[idx - 1]
			this.ProcessImage {
				ReadImageFile(this, imgInfo.fileName)
			}
		}
	}
	OnMenu_Next(event:wx.CommandEvent) = {
		idx = g.imgInfos.find(g.imgInfoCur):index
		if (idx && idx < g.imgInfos.len() - 1) {
			imgInfo = g.imgInfos[idx + 1]
			this.ProcessImage {
				ReadImageFile(this, imgInfo.fileName)
			}
		}
	}
	OnMenu_OutputPDF(event:wx.CommandEvent) = {
		filter = 'PDF file (*.pdf)|*.pdf|All files (*.*)|*.*'$
		dlg = wx.FileDialog(this, 'Specify a PDF file to output'$,
							'', '', filter, wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
		if (dlg.ShowModal() == wx.ID_OK) {
			fileNamePDF = dlg.GetPath()
			orientation = g.paperSizeCur.GetBetterOrientation(g.layoutCur, g.orientation)
			ComposeProductPDF(fileNamePDF, g.imgPhotoHighRes,
								g.layoutCur, g.paperSizeCur, orientation)
		}
	}
	OnMenu_LaunchPDFViewer(event:wx.CommandEvent) = {
		orientation = g.paperSizeCur.GetBetterOrientation(g.layoutCur, g.orientation)
		ComposeProductPDF(g.fileNameTmpPDF, g.imgPhotoHighRes,
							g.layoutCur, g.paperSizeCur, orientation)
		try {
			OpenWithApp(g.fileNameTmpPDF)
		} catch {
			wx.MessageDialog(parent, 'Failed to launch PDF viewer'$,
							'Error'$, wx.OK | wx.ICON_ERROR | wx.CENTRE) {|dlg|
				dlg.ShowModal()
			}
		}
	}
	OnMenu_RenameLabel(event:wx.CommandEvent) = {
		dlg = RenameLabelDialog(this, g.imgInfoCur)
		dlg.CentreOnParent()
		if (dlg.ShowModal() == wx.OK) {
			wx.BusyCursor {
				this.productViewer.UpdateContent(this)
				this.productViewer.UpdateContent()
			}
		}
	}
	OnMenu_RotateL(event:wx.CommandEvent) = {
		this.ProcessImage {
			RotateImageL()
		}
	}
	OnMenu_RotateR(event:wx.CommandEvent) = {
		this.ProcessImage {
			RotateImageR()
		}
	}
	OnMenu_TiltAdj(event:wx.CommandEvent) = {
		g.imgInfoCur.tiltAdjFlag = event.IsChecked()
		if (g.imgInfoCur.tiltAdjFlag) {
			this.extractor.Refresh()
		} else {
			xrateMid = (g.imgInfoCur.xrateTop + g.imgInfoCur.xrateBtm) / 2
			g.imgInfoCur.xrateTop = g.imgInfoCur.xrateBtm = xrateMid
			this.extractor.Refresh()
			wx.BusyCursor {
				this.productViewer.UpdateContent(this)
				this.productViewer.UpdateContent()
			}
		}
	}
	OnMenu_FrostFrame(event:wx.CommandEvent) = {
		g.frostFrameFlag = event.IsChecked()
		this.extractor.Refresh()
	}
	OnMenu_CenterGuide(event:wx.CommandEvent) = {
		g.centerGuideFlag = event.IsChecked()
		this.extractor.Refresh()
	}
	OnMenu_CopyExtractedImage(event:wx.CommandEvent) = {
		imgExtract = ExtractImage(g.imgPhotoHighRes, g.layoutCur, 0, 0)
		if (wx.TheClipboard.Open()) {
			wx.TheClipboard.SetData(wx.BitmapDataObject(imgExtract))
			wx.TheClipboard.Close()
		}
	}
	OnMenu_SaveExtractedImage(event:wx.CommandEvent) = {
		filter = 'JPEG file (*.jpg)|*.jpg|PNG file (*.png)|*.png|BMP file (*.bmp)|*.bmp|GIF file (*.gif)|*.gif'$
		dlg = wx.FileDialog(this, 'Specify an image file to save'$,
							'', '', filter, wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
		if (dlg.ShowModal() == wx.ID_OK) {
			fileName = dlg.GetPath()
			imgExtract = ExtractImage(g.imgPhotoHighRes, g.layoutCur, 0, 0)
			try {
				wx.BusyCursor {
					imgExtract.write(fileName)
				}
			} catch {
				wx.MessageDialog(this, 'Failed to save an image file'$,
								'Error'$, wx.OK | wx.ICON_ERROR | wx.CENTRE) {|dlg|
					dlg.ShowModal()
				}
			}
		}
	}
	OnMenu_OrientVert(event:wx.CommandEvent) = {
		g.orientation = `vertical
		wx.BusyCursor {
			this.productViewer.UpdateContent(this)
			this.productViewer.UpdateContent()
		}
	}
	OnMenu_OrientHorz(event:wx.CommandEvent) = {
		g.orientation = `horizontal
		wx.BusyCursor {
			this.productViewer.UpdateContent(this)
			this.productViewer.UpdateContent()
		}
	}
	OnMenu_OrientAuto(event:wx.CommandEvent) = {
		g.orientation = `auto
		wx.BusyCursor {
			this.productViewer.UpdateContent(this)
			this.productViewer.UpdateContent()
		}
	}
	OnMenu_About(event:wx.CommandEvent) = {
		dlg = AboutDialog(this)
		dlg.CentreOnParent()
		dlg.ShowModal()
	}
}

//-----------------------------------------------------------------------------
// ImageListDialog
//-----------------------------------------------------------------------------
ImageListDialog = class(wx.Dialog) {
	__init__(parent:wx.Window, imgInfos[]:ImageInfo, idxSel:number,
			pos:wx.Point => wx.DefaultPosition, size:wx.Size => wx.Size(640, 480)) = {|parent, wx.ID_ANY,
						'Image List'$, pos, size, style => wx.DEFAULT_DIALOG_STYLE|
		this.SetIcon(g.icon)
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 2))
		this.imgInfos = imgInfos
		this.imgInfoCur = nil
		wx.ListView(this, wx.ID_ANY, style => wx.LC_ICON | wx.LC_SINGLE_SEL | \
								wx.LC_AUTOARRANGE | wx.LC_EDIT_LABELS) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags(1).Expand())
			this.listCtrl = ctrl
			ctrl.Bind(wx.EVT_LIST_ITEM_ACTIVATED) {|event| this.OnListItemActivated(event)}
			ctrl.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK) {|event| this.OnListItemRightClick(event)}
			ctrl.Bind(wx.EVT_LIST_KEY_DOWN) {|event| this.OnListKeyDown(event)}
			ctrl.Bind(wx.EVT_LIST_END_LABEL_EDIT) {|event| this.OnListEndLabelEdit(event)}
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Border(wx.TOP, 4).Expand())
			hbox.AddSpacer(16)
			hbox.AddStretchSpacer(1)
			wx.Button(this, wx.ID_OK, 'Select'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags())
				ctrl.SetDefault()
			}
			wx.Button(this, wx.ID_CANCEL, 'Close'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Border(wx.LEFT, 16))
			}
			hbox.AddSpacer(16)
		}
		wx.BusyCursor {
			this.PrepareContent(idxSel)
		}
		this.idxImgInfoProtected = idxSel
		this.Bind(wx.EVT_BUTTON, wx.ID_OK) {|event| this.OnButton_OK(event)}
		this.Bind(wx.EVT_MENU, ID_RenameLabel) {|event| this.OnMenu_RenameLabel(event)}
		this.Bind(wx.EVT_MENU, ID_Remove) {|event| this.OnMenu_Remove(event)}
		this.Bind(wx.EVT_UPDATE_UI, wx.ID_OK) {|event|
			idx = this.listCtrl.GetFirstSelected()
			event.Enable(idx >= 0)
		}
		this.Bind(wx.EVT_UPDATE_UI, ID_Remove) {|event|
			idx = this.listCtrl.GetFirstSelected()
			if (idx < 0) {
				event.Enable(false)
			} else {
				idxImgInfo = this.listCtrl.GetItemData(idx)
				event.Enable(idxImgInfo != this.idxImgInfoProtected)
			}
		}
	}
	PrepareContent(idxSel:number) = {
		size = 128
		imgList = wx.ImageList(size, size)
		this.imgInfos.each {|imgInfo, idx|
			if (!imgInfo.imgPhotoRaw) {
				imgInfo.imgPhotoRaw = image(imgInfo.fileName)
			}
			imgPhotoRaw = imgInfo.imgPhotoRaw
			imgSrc = (imgPhotoRaw.thumbnail(size):box).rotate(imgInfo.rotate)
			img = image(`rgb, size, size, `gray)
			img.paste((size - imgSrc.width) / 2, (size - imgSrc.height) / 2, imgSrc)
			bmp:wx.Bitmap = img
			if (idx == idxSel) {
				wx.MemoryDC(bmp) {|dc|
					dc.DrawBitmap(g.imgTick, 2, 2, false)
				}
			}
			imgList.Add(bmp)
		}
		this.listCtrl.SetImageList(imgList, wx.IMAGE_LIST_NORMAL)
		this.imgInfos.each {|imgInfo, idx|
			this.listCtrl.InsertImageStringItem(idx, imgInfo.label, idx)
			this.listCtrl.SetItemData(idx, idx)
		}
		this.listCtrl.SetItemTextColour(idxSel, wx.Colour(128, 0, 0))
		this.listCtrl.SetItemState(idxSel,
				wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED,
				wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED)
		this.listCtrl.EnsureVisible(idxSel)
	}
	GetImageInfos() = this.imgInfos
	GetImageInfo() = this.imgInfoCur
	UpdateImageInfos() = {
		this.imgInfos = repeat (this.listCtrl.GetItemCount()):list {|idx|
			idxImgInfo = this.listCtrl.GetItemData(idx)
			this.imgInfos[idxImgInfo]
		}
	}
	RemoveSelectedImage() = {
		idx = this.listCtrl.GetFirstSelected()
		if (idx < 0) {
			wx.Bell()
			return
		}
		idxImgInfo = this.listCtrl.GetItemData(idx)
		if (idxImgInfo == this.idxImgInfoProtected) {
			wx.Bell()
			return
		}
		wx.MessageDialog(this,
				R'''
				Are you sure to remove the image from the list?
				
				It will not delete the original file.'''$,
				'Confirm'$, wx.OK | wx.CANCEL | wx.OK_DEFAULT | \
						wx.ICON_QUESTION | wx.CENTRE) {|dlg|
			(dlg.ShowModal() != wx.ID_OK) && return
		}
		this.listCtrl.DeleteItem(idx)
		this.listCtrl.Update()
		if (idx >= this.listCtrl.GetItemCount()) {
			idx = this.listCtrl.GetItemCount() - 1
		}
		this.listCtrl.SetItemState(idx,
				wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED,
				wx.LIST_STATE_FOCUSED | wx.LIST_STATE_SELECTED)
	}
	OnButton_OK(event:wx.CommandEvent) = {
		((idx = this.listCtrl.GetFirstSelected()) < 0) && return
		idxImgInfo = this.listCtrl.GetItemData(idx)
		this.imgInfoCur = this.imgInfos[idxImgInfo]
		this.UpdateImageInfos()
		this.EndModal(wx.OK)
	}
	OnMenu_RenameLabel(event:wx.CommandEvent) = {
		((idx = this.listCtrl.GetFirstSelected()) < 0) && return
		this.listCtrl.EditLabel(idx)
	}
	OnMenu_Remove(event:wx.CommandEvent) = {
		this.RemoveSelectedImage()
	}
	OnListItemActivated(event:wx.ListEvent) = {
		((idx = event.GetIndex()) < 0) && return
		idxImgInfo = this.listCtrl.GetItemData(idx)
		this.imgInfoCur = this.imgInfos[idxImgInfo]
		this.UpdateImageInfos()
		this.EndModal(wx.OK)
	}
	OnListItemRightClick(event:wx.ListEvent) = {
		wx.Menu() {|m|
			m.AppendEx(ID_RenameLabel,	'&Rename Label'$,	g.imgRenameLabel)
			m.AppendEx(ID_Remove,		'R&emove'$,			g.imgClose)
			this.PopupMenu(m)
		}
	}
	OnListKeyDown(event:wx.ListEvent) = {
		if (event.GetKeyCode() == wx.WXK_DELETE) {
			this.RemoveSelectedImage()
		}
	}
	OnListEndLabelEdit(event:wx.ListEvent) = {
		((idx = event.GetIndex()) < 0) && return
		idxImgInfo = this.listCtrl.GetItemData(idx)
		this.imgInfos[idxImgInfo].label = event.GetText()
	}
}

//-----------------------------------------------------------------------------
// ColorAdjustDialog
//-----------------------------------------------------------------------------
ColorAdjustDialog = class(wx.Dialog) {
	__init__(parent:wx.Window, extractor:Extractor, imgInfo:ImageInfo) = {|parent, wx.ID_ANY,
									'Color Adjustment'$, size => wx.Size(320, 140)|
		this.extractor = extractor
		this.imgInfo = imgInfo
	}
}

//-----------------------------------------------------------------------------
// RenameLabelDialog
//-----------------------------------------------------------------------------
RenameLabelDialog = class(wx.Dialog) {
	__init__(parent:wx.Window, imgInfo:ImageInfo) = {|parent, wx.ID_ANY,
									'Rename Label'$, size => wx.Size(320, 140)|
		this.imgInfo = imgInfo
		this.SetIcon(g.icon)
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 8))
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.TOP, 8))
			wx.StaticText(this, wx.ID_ANY, 'Original Name'$, size => wx.Size(80, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Centre())
			}
			wx.StaticText(this, wx.ID_ANY, imgInfo.label, style => wx.BORDER_SUNKEN) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Border(wx.LEFT, 8))
			}
		}
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Expand().Border(wx.TOP, 8))
			wx.StaticText(this, wx.ID_ANY, 'Modified Name'$, size => wx.Size(80, -1)) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Centre())
			}
			wx.TextCtrl(this, wx.ID_ANY, imgInfo.label) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags(1).Border(wx.LEFT, 8))
				this.ctrlText = ctrl
			}
		}
		vbox.AddStretchSpacer(1)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Centre().Border(wx.TOP | wx.BOTTOM, 4))
			wx.Button(this, wx.ID_OK, 'OK'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Centre())
				ctrl.SetDefault()
			}
			wx.Button(this, wx.ID_CANCEL, 'Cancel'$) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Centre().Border(wx.LEFT, 8))
			}
		}
		this.ctrlText.SetFocus()
		this.Bind(wx.EVT_BUTTON, wx.ID_OK) {|event| this.OnButton_OK(event)}
	}
	OnButton_OK(event:wx.CommandEvent) = {
		this.imgInfo.label = this.ctrlText.GetValue()
		this.EndModal(wx.OK)
	}
}

//-----------------------------------------------------------------------------
// AboutDialog
//-----------------------------------------------------------------------------
AboutDialog = class(wx.Dialog) {
	__init__(parent:wx.Window) = {|parent, wx.ID_ANY, 'About'$, size => wx.Size(320, 200)|
		this.SetIcon(g.icon)
		outerBox = wx.BoxSizer(wx.VERTICAL)
		this.SetSizer(outerBox)
		vbox = wx.BoxSizer(wx.VERTICAL)
		outerBox.Add(vbox, wx.SizerFlags(1).Expand().Border(wx.ALL, 2))
		vbox.AddStretchSpacer(1)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Centre())
			wx.StaticBitmap(this, wx.ID_ANY, wx.NullBitmap) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags())
				ctrl.SetIcon(g.icon)
			}
			wx.BoxSizer(wx.HORIZONTAL) {|hboxIn|
				hbox.Add(hboxIn, wx.SizerFlags().Centre().Border(wx.LEFT, 12))
				hbox = hboxIn
				wx.StaticText(this, wx.ID_ANY, 'Gura Shot'$) {|ctrl|
					hbox.Add(ctrl, wx.SizerFlags())
					font = ctrl.GetFont()
					font.SetPointSize(14)
					font.SetWeight(wx.FONTWEIGHT_BOLD)
					ctrl.SetFont(font)
				}
				wx.StaticText(this, wx.ID_ANY, 'Version ' + Version) {|ctrl|
					hbox.Add(ctrl, wx.SizerFlags().Align(wx.ALIGN_BOTTOM).Border(wx.LEFT, 12))
				}
			}
		}
		vbox.AddSpacer(8)
		wx.StaticText(this, wx.ID_ANY, 'Copyright (C) 2014 ypsitau') {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Centre())
		}
		vbox.AddStretchSpacer(1)
		wx.BoxSizer(wx.HORIZONTAL) {|hbox|
			vbox.Add(hbox, wx.SizerFlags().Centre())
			url = 'http://app.gura-lang.org/gurashot/'
			wx.HyperlinkCtrl(this, wx.ID_ANY, url, url) {|ctrl|
				hbox.Add(ctrl, wx.SizerFlags().Border(wx.LEFT, 4))
			}
		}
		vbox.AddStretchSpacer(1)
		wx.StaticLine(this, wx.ID_ANY) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Expand())
		}
		wx.Button(this, wx.ID_OK, 'OK'$) {|ctrl|
			vbox.Add(ctrl, wx.SizerFlags().Centre().Border(wx.TOP | wx.BOTTOM, 4))
			ctrl.SetDefault()
			ctrl.SetFocus()
		}
	}
}

//-----------------------------------------------------------------------------
// App
//-----------------------------------------------------------------------------
App = class(wx.App) {
	OnInit() = {
		LoadConfig()
		InitializeResource()
		UpdateImagePhoto()
		frame = Frame('Gura Shot'$)
		frame.Show()
		g.frame = frame
		true
	}
	OnExit() = {
		SaveConfig()
		0
	}
}

wx.IMPLEMENT_APP(App)
